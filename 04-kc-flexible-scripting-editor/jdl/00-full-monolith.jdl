/*
 * Create the Monolith App
 */


application {
  config {
    applicationType monolith
    reactive true
    baseName monicetnpFullStack
    packageName pt.uac.fgf.monicetnp.monolith
    serverPort 8080
    buildTool maven
    authenticationType oauth2
    searchEngine elasticsearch
    serviceDiscoveryType no
    databaseType sql
    devDatabaseType postgresql
    prodDatabaseType postgresql
    enableHibernateCache true
    cacheProvider ehcache
    messageBroker kafka
    clientFramework angularX
    clientTheme united
    clientThemeVariant dark
    enableTranslation true
    nativeLanguage en
    languages [pt-pt, pt-br, en, de, es, fr]
    testFrameworks [cypress, gatling]
  }
  entities *
}




/** *************************************
/* Microservice: 01 - msrvc01GeoAddressing
*  --> 
/* ************************************* */


/**
 * - Country 
 * - Province
 * - TownCity 
 * - District
 * - Address
 * - Island
 * - GeorefLocalilty
*/


entity Country(tb_country) {
    acronym String required maxlength(3)
    name String required maxlength(40)
    continent ContinentEnum required
    geoPolygonArea AnyBlob
}


entity Province(tb_province) {
    acronym String required maxlength(3)
    name String required maxlength(40)
    geoPolygonArea AnyBlob
}

entity TownCity(tb_town_city) {
    acronym String required maxlength(8)
    name String required maxlength(40)
    geoPolygonArea AnyBlob
}

entity District(tb_district) {
    acronym String required maxlength(8)
    name String required maxlength(40)
    geoPolygonArea AnyBlob
}

entity Island(tb_island) {
    acronym String maxlength(8)
    name String required maxlength(40)
    geoPolygonArea AnyBlob
}

entity GeorefLocalility(tb_georef_locality) {
    acronym String required maxlength(8)
    name String required maxlength(840)
    description TextBlob
    geoPolygonArea AnyBlob
}

enum ContinentEnum {
    AFRICA, ASIA, EUROPE, OCEANIA, CENTRAL_AMERICA, NORTH_AMERICA, SOUTH_AMERICA
}


relationship ManyToOne {
    Province{country(name) required} to Country{provinces},
    TownCity{province(name) required} to Province{townCities},
    District{townCity(name) required} to TownCity{districts},
    Island{country(name) required} to Country{islands}
}




/** *************************************
/* Microservice: 02 - Partner
/* --> 
/* ************************************* */


/**
 * - Partner 
 * - PartnerType
 * - Vessel 
*/



entity Partner(tb_partner) {
    acronym String required maxlength(20)
    name String required minlength(2) maxlength(120)
    description TextBlob
    streetAddress String required maxlength(120)
    houseNumber String maxlength(20)
    locationName String maxlength(50)
    postalCode String required maxlength(9)
    pointLocation AnyBlob
    mainEmail String maxlength(120) pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    landPhoneNumber String maxlength(15)
    mobilePhoneNumber String maxlength(15)
    faxNumber String maxlength(15)
    extraDetails TextBlob    
    status PartnerStatusEnum required
    active Boolean required
}

entity PartnerType(tb_type_partner) {
    name String required maxlength(120)
    description TextBlob required
    businessHandlerClazz String maxlength(512)    
}


entity Vessel(tb_vessel) {
    acronym String required maxlength(20)
    name String required minlength(2) maxlength(100)
    lenght Double
    height Double
    weight Double
    depth  Double
    enginePowerInHP Integer
    active Boolean required
    extraFeatures TextBlob    
}





enum PartnerStatusEnum {
    UNDER_EVALUATION, ONBOARDING, READY_TO_START, WORKING, PENDENT, IN_FAILURE
}



relationship ManyToOne {
    Partner{partnerType(name) required} to PartnerType{partners},
    Vessel{partner(name) required} to Partner{vessels},

    Partner{townCity(name)} to TownCity{partners}
}






/** *************************************
/* Microservice: 03 - PersonMgmnt
*  --> 
/* ************************************* */


/**
 * - PersonType 
 * - Person
*/


entity PersonType(tb_type_person) {
    code String required maxlength(5)
    description String required maxlength(40)
}

entity Person(tb_person) {
    firstName String required maxlength(50)
    lastName String required maxlength(80)
    birthday LocalDate required
    gender GenderEnum required
    codeBI String maxlength(20)
    codeNIF String maxlength(20)
    streetAddress String required maxlength(120)
    houseNumber String maxlength(20)
    locationName String maxlength(50)
    postalCode String required maxlength(9)
    pointLocation AnyBlob
    mainEmail String unique required maxlength(120) pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/)
    landPhoneNumber String maxlength(15)
    mobilePhoneNumber String maxlength(15)
    occupation String maxlength(40)
    preferredLanguage String maxlength(5)
    usernameInOAuth2 String maxlength(40)
    userIdInOAuth2 String maxlength(80)
    extraDetails TextBlob
    avatarImg ImageBlob
}


enum GenderEnum {
    MALE, FEMALE, OTHER
}


relationship ManyToOne {
    Person{personType(code) required} to PersonType{persons},
    Person{partner(name) required} to Partner{persons} 

    Person{townCity(name)} to TownCity{persons}       
}





/** *************************************
/* Microservice: 04 - mnctnpMcs04SpecieDetails
*  --> 
/* ************************************* */


/**
 * - SpecieFamily 
 * - SpecieCatalog
 * - AssetsAlbumSpecie 
 * - PopularName
 * - IdentifiedAnimal
*/


entity SpecieFamily(tb_specie_family) {
    acronym String required unique maxlength(20)
    name String required maxlength(80)
    description TextBlob
}

entity Specie(tb_specie_catalog) {
    scientificName String required unique maxlength(120)
    commonName String required maxlength(80)    
    extraDetails TextBlob
}

entity AssetsAlbumSpecie(tb_assets_album_specie) {
    name String required maxlength(180)
    extraDetails TextBlob
}

entity IdentifiedCetaceo(tb_identified_cetaceo) {
    monicetId String maxlength(80)
    name String required maxlength(80)
    biologicalSex BiologicalSexEnum
    extraDetails TextBlob
}



enum BiologicalSexEnum {
    FEMALE, MALE, HERMAPHRODITE
}



relationship ManyToOne {
    Specie{specieFamily(name) required} to SpecieFamily{species},
    AssetsAlbumSpecie{specie(commonName) required} to Specie{assetsAlbumsSpecies},
    IdentifiedCetaceo{specie(commonName) required} to Specie{identifiedsCetaceos}
}




/** *************************************
/* Microservice: 05 - mnctnpMcs05TripTracking
*  --> 
/* ************************************* */


/**
 * - Trip 
 * - TripMonicetPerson 
 * - TripEventPosition
 * - Sighting
 * - AtmosphericInfo
 * - AssetsAlbumSighting
*/


entity Trip(tb_trip) {
    name String required maxlength(80)
    scheduledDatetime Instant required
    numberPassagers Integer
    routeHistory TextBlob
    tripStart Instant
    tripEnd Instant
    durationInSec Long
    averageKnots Double
    maxKnots Double
    status TripStatusEnum required
    extraDetails TextBlob
}

entity TripMonicetPerson(tb_trip_monicet_person) {
    personRoleInTrip PersonRoleInTripEnum required
}

entity TripEventPosition(tb_trip_event_position) {
    tripEventType TripEventTypeEnum required
    description String required maxlength(80)
    pointLocation AnyBlob
    tripStart Instant
    tripEnd Instant
    durationInSec Long
    distanceToCoastInM Integer
    seaDepthAtPosition Integer
    seaSlopeInRadians Integer
    extraDetails TextBlob
}

entity Sighting(tb_sighting) {
    sightingType SightingTypeEnum
    name String required maxlength(120)
    sightingStart Instant
    sightingEnd Instant
    qtyBoatsPresent Integer
    sightingSureness SightingSurenessEnum
    monicetBehaviorDetected MonicetBehaviorEnum
    extraDetails TextBlob
}

entity AtmosphericInfo(tb_atmospheric_info) {
    seaState BeaufortSeaStateEnum required
    visibilityState MonicetVisibilityStateEnum
    weatherCondition WeatherConditionEnum
    temperatureInCelsius Double
    waterTemperatureInCelsius Double
    extraDetails TextBlob
}

entity AssetsAlbumSighting(tb_assets_album_sighting) {
    name String required maxlength(80)
    extraDetails TextBlob
}




enum TripStatusEnum {
    IN_PLANNING, SCHEDULED, CONFIRMED, ONBOARDING, ON_SEA, FINISHED, CANCELED
}

enum PersonRoleInTripEnum {
    SHIP_DRIVER, GUIDE, SKIPPER, BIOLOGIST, ADMIN
}

enum TripEventTypeEnum {
    START_TRIP, JUST_REGISTERING_POSITION, SPECIES_SIGHTING, STOP_TRIP
}

enum SightingTypeEnum {
    SIGHTING_TYPE_1, SIGHTING_TYPE_2, SIGHTING_TYPE_3, SIGHTING_TYPE_4
}

enum SightingSurenessEnum {
    LOW, MEDIUM, HIGH
}

enum MonicetBehaviorEnum {
    FEEDING, RESTING, SOCIALIZING, TRAVELLING
}

enum BeaufortSeaStateEnum {
    CALM, RIPPLES_W_NO_CRESP, SMALL_WAVELETS, LARGE_WAVELETS, SMALL_WAVES, MODERATE_WAVES, LONG_WAVES
}

enum MonicetVisibilityStateEnum {
    VERY_BAD, BAD, GOOD, VERY_GOOD, UNKNWOWN
}

enum WeatherConditionEnum {
    SUNNY, CLOUDY, RAINING, STORM, SNOWING
}



relationship ManyToOne {
    TripMonicetPerson{trip(name) required} to Trip{tripMonicetPersons},
    TripEventPosition{trip(name) required} to Trip{tripEventsPositions},
    Sighting{tripEventPosition(description) required} to TripEventPosition{sightings},
    AssetsAlbumSighting{sighting(name) required} to Sighting{assetsAlbumsSightings},

    Trip{partner(name) required} to Partner{trips},
    Trip{vessel(name)} to Vessel{trips},
    TripMonicetPerson{person(lastName) required} to Person{tripsMonicetPersons}    
}


relationship OneToOne {
    Sighting{atmosphericInfo} to AtmosphericInfo{sighting}
}


relationship ManyToMany {
    Sighting{species} to Specie{sightings},
    Sighting{identifiedsCetaceos} to IdentifiedCetaceo{sightings}
}




/** *************************************
/* Microservice: 07 - mnctnpMcs07MediaHandling
*  --> 
/* ************************************* */


/**
 * - RawAssetProcTmp 
 * - AssetType
 * - Asset
 * - AssetMetadata
*/

entity AssetType(tb_type_asset) {
    acronym String maxlength(30)
    name String required maxlength(100)
    description String maxlength(255)
    handlerClazzName String maxlength(255)
    extraDetails TextBlob
}

entity RawAssetProcTmp(tb_raw_asset_proc_tmp) {
    name String required maxlength(255)
    statusRawProcessing StatusRawProcessingEnum
    fullFilenamePath String maxlength(512)
    assetRawContentAsBlob Blob
    extraDetails TextBlob
}

entity Asset(tb_asset) {
    uid UUID
    name String required maxlength(255)
    storageTypeUsed StorageTypeEnum
    fullFilenamePath String maxlength(512)
    status StatusAssetEnum
    preferredPurpose PreferredPurposeEnum
    assetContentAsBlob Blob
}

entity AssetMetadata(tb_asset_metadata) {
    metadataDetails TextBlob
}



enum StatusRawProcessingEnum {
    UPLOADING, UPLOADED, WAITING_FOR_PROCESSING, PROCESSING, DONE, FAILURE
}

enum StorageTypeEnum {
    BLOB_IN_DB, LOCAL_FILESYSTEM, LOCAL_MINIO, REMOTE_FILESYSTEM, REMOTE_MINIO, AWS_S3, OTHER_CLOUD_STORAGE
}

enum StatusAssetEnum {
    ENABLED, DISABLED, DELETED
}

enum PreferredPurposeEnum {
    USER_AVATAR, MONICET_ALBUM, OTHER
}





relationship ManyToOne {
    RawAssetProcTmp{assetType(name) required} to AssetType{rawAssetsProcsTmps},
    Asset{assetType(name) required} to AssetType{assets},
    Asset{rawAssetProcTmp(name)} to RawAssetProcTmp{assets}
}

relationship OneToOne {
    AssetMetadata{asset(name) required} to Asset{assetMetadata}
}

relationship ManyToMany {
    Asset{assetsAlbumsSpecies} to AssetsAlbumSpecie{assets}
    Asset{assetsAlbumsSightings} to AssetsAlbumSighting{assets}    
}











/*
 * Create the Footer Settings
*/

service * with serviceImpl
dto * with mapstruct


filter Country, Province, TownCity, District, Partner, Person, Specie, Trip, Sighting, Asset


paginate * with pagination


deployment {
  deploymentType docker-compose
  dockerRepositoryName "scout23df"
  monitoring no
}
